# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on pull request events but only for the "main" branch
  # Note: presume the "main" branch is locked, requires a pull request before merging,
  #       and requires linear history. Do not enable push events to "main".
  pull_request:
    branches: [ "main" ]

  # Allows you to reuse this workflow
  workflow_call:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Configure GIT to use LF
        shell: pwsh
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf


      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      - name: Install PSScriptAnalyzer module
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module PSScriptAnalyzer -Force -ErrorAction Stop
          Write-Output $("Using Powershell version: " + $PSVersionTable.PSVersion.Major.ToString() + "." + $PSVersionTable.PSVersion.Minor.ToString())

      # Verify the rules set
      - name: Validate FormattingRules
        shell: pwsh
        run: |
          Invoke-ScriptAnalyzer -Path FormattingRules.psd1 -Recurse -Outvariable ProjectIssues
          $Glitches = $ProjectIssues.Where({$_.Severity -eq 'Error' -or $_.Severity -eq 'Warning'})
          if ($Glitches.Count) {  Write-Error "There are $($Glitches.Count) errors and warnings in FormattingRules.psd1." -ErrorAction Stop  }

      # Validate PowerShell scripts
      - name: Verify PowerShell script formatting
        shell: pwsh
        run: |
          ForEach ($File in $(Get-ChildItem -Filter *.ps1 -File -Name)) {
          Write-Host "Processing $File ..."
          $Script = $($(Get-Content $File -Encoding UTF8) -join "`n") + "`n"
          $Revision = Invoke-Formatter -ScriptDefinition $Script -Settings FormattingRules.psd1
          $Output = New-Object Text.UTF8Encoding
          # Prior to PowerShell V6
          # Set-Content -Path $File -Force -Value $Output.GetBytes($Revision) -Encoding Byte
          # Current PowerShell V7.x on GitHub
          Set-Content -Path $File -Force -Value $Output.GetBytes($Revision) -AsByteStream
          }
          git diff --exit-code
